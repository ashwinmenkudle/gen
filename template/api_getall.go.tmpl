{{define "api_getall.go.tmpl"}}
// GetAll{{.StructName}} is a function to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Summary Get list of {{.StructName}}
// @Tags {{.StructName}}
// @Description GetAll{{.StructName}} is a handler to get a slice of record(s) from {{.TableName}} table in the {{.DatabaseName}} database
// @Accept  json
// @Produce  json
// @Param   page     query    int     false        "page requested (defaults to 0)"
// @Param   size     query    int     false        "number of records in a page  (defaults to 20)"
// @Param   sort     query    string  false        "db sort order column"
// @Success 200 {object} {{.apiPackageName}}.PagedResults{data=[]{{.modelPackageName}}.{{.StructName}}}
// @Failure 400 {object} {{.apiPackageName}}.HTTPError
// @Failure 404 {object} {{.apiPackageName}}.HTTPError
// @Router /{{.StructName | toLower}} [get]
// http "{{$.serverScheme}}://{{$.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/{{.StructName | toLower}}?page=0&size=20" X-Api-User:user123
func GetAll{{.StructName}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := initializeContext(r)
	p, links, err := get{{.StructName}}Query(r)
	if err != nil {
		io.WriteString(w, err.Error())
		w.WriteHeader(http.StatusBadRequest)
		return
	}

    records, totalRows, err :=  {{.daoPackageName}}.GetAll{{.StructName}}(ctx, p)
	if err != nil {
	    returnError(ctx, w, r, err)
		return
	}

	resps := make([]{{.repsPackageName}}.{{.StructName}}, 0, len(records))
	for _, r := range records {
		resps = append(resps, mapper.To{{.StructName}}Rep(*r))
	}

	if !(totalRows > int64(p.Offset)+int64(p.Limit)) {
		delete(links, "next")
	}

	result := &PagedResults[{{.repsPackageName}}.{{.StructName}}]{Data: resps, Count: totalRows, Links: links}
	writeJSON(ctx, w, result)
}
{{end}}
